package com.frank.massageinstrument.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.frank.massageinstrument.entity.AcupointBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "acupoint".
*/
public class AcupointBeanDao extends AbstractDao<AcupointBean, Void> {

    public static final String TABLENAME = "acupoint";

    /**
     * Properties of entity AcupointBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Acu_id = new Property(0, int.class, "acu_id", false, "ACU_ID");
        public final static Property Acu_key_no = new Property(1, int.class, "acu_key_no", false, "ACU_KEY_NO");
        public final static Property Acu_name = new Property(2, String.class, "acu_name", false, "ACU_NAME");
        public final static Property Acu_parent_no_id = new Property(3, int.class, "acu_parent_no_id", false, "ACU_PARENT_NO_ID");
        public final static Property Acu_xml = new Property(4, String.class, "acu_xml", false, "ACU_XML");
    }


    public AcupointBeanDao(DaoConfig config) {
        super(config);
    }
    
    public AcupointBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AcupointBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getAcu_id());
        stmt.bindLong(2, entity.getAcu_key_no());
 
        String acu_name = entity.getAcu_name();
        if (acu_name != null) {
            stmt.bindString(3, acu_name);
        }
        stmt.bindLong(4, entity.getAcu_parent_no_id());
 
        String acu_xml = entity.getAcu_xml();
        if (acu_xml != null) {
            stmt.bindString(5, acu_xml);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AcupointBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getAcu_id());
        stmt.bindLong(2, entity.getAcu_key_no());
 
        String acu_name = entity.getAcu_name();
        if (acu_name != null) {
            stmt.bindString(3, acu_name);
        }
        stmt.bindLong(4, entity.getAcu_parent_no_id());
 
        String acu_xml = entity.getAcu_xml();
        if (acu_xml != null) {
            stmt.bindString(5, acu_xml);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public AcupointBean readEntity(Cursor cursor, int offset) {
        AcupointBean entity = new AcupointBean( //
            cursor.getInt(offset + 0), // acu_id
            cursor.getInt(offset + 1), // acu_key_no
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // acu_name
            cursor.getInt(offset + 3), // acu_parent_no_id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // acu_xml
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AcupointBean entity, int offset) {
        entity.setAcu_id(cursor.getInt(offset + 0));
        entity.setAcu_key_no(cursor.getInt(offset + 1));
        entity.setAcu_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAcu_parent_no_id(cursor.getInt(offset + 3));
        entity.setAcu_xml(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(AcupointBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(AcupointBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(AcupointBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
